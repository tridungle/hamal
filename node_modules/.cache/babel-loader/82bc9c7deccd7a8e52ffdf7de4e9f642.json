{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { detect } from \"detect-browser\";\nimport { AuthEventKind, AuthInfo, CoreStitchAuth, DeviceFields, StitchAuthResponseCredential, StitchClientError, StitchClientErrorCode } from \"mongodb-stitch-core-sdk\";\nimport version from \"../../internal/common/Version\";\nimport RedirectFragmentFields from \"./RedirectFragmentFields\";\nimport RedirectKeys from \"./RedirectKeys\";\nimport StitchRedirectError from \"./StitchRedirectError\";\nimport StitchUserFactoryImpl from \"./StitchUserFactoryImpl\";\nvar alphaNumericCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nvar StitchAuthImpl = function (_super) {\n  __extends(StitchAuthImpl, _super);\n\n  function StitchAuthImpl(requestClient, browserAuthRoutes, authStorage, appInfo, jsdomWindow) {\n    if (jsdomWindow === void 0) {\n      jsdomWindow = window;\n    }\n\n    var _this = _super.call(this, requestClient, browserAuthRoutes, authStorage) || this;\n\n    _this.browserAuthRoutes = browserAuthRoutes;\n    _this.authStorage = authStorage;\n    _this.appInfo = appInfo;\n    _this.jsdomWindow = jsdomWindow;\n    _this.listeners = new Set();\n    _this.synchronousListeners = new Set();\n    return _this;\n  }\n\n  Object.defineProperty(StitchAuthImpl.prototype, \"userFactory\", {\n    get: function () {\n      return new StitchUserFactoryImpl(this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StitchAuthImpl.prototype.getProviderClient = function (factory, providerName) {\n    if (isAuthProviderClientFactory(factory)) {\n      return factory.getClient(this, this.requestClient, this.authRoutes);\n    } else {\n      return factory.getNamedClient(providerName, this.requestClient, this.authRoutes);\n    }\n  };\n\n  StitchAuthImpl.prototype.loginWithCredential = function (credential) {\n    return _super.prototype.loginWithCredentialInternal.call(this, credential);\n  };\n\n  StitchAuthImpl.prototype.loginWithRedirect = function (credential) {\n    var _this = this;\n\n    var _a = this.prepareRedirect(credential),\n        redirectUrl = _a.redirectUrl,\n        state = _a.state;\n\n    this.requestClient.getBaseURL().then(function (baseUrl) {\n      _this.jsdomWindow.location.replace(baseUrl + _this.browserAuthRoutes.getAuthProviderRedirectRoute(credential, redirectUrl, state, _this.deviceInfo));\n    });\n  };\n\n  StitchAuthImpl.prototype.linkWithRedirectInternal = function (user, credential) {\n    var _this = this;\n\n    if (this.user !== undefined && user.id !== this.user.id) {\n      return Promise.reject(new StitchClientError(StitchClientErrorCode.UserNoLongerValid));\n    }\n\n    var _a = this.prepareRedirect(credential),\n        redirectUrl = _a.redirectUrl,\n        state = _a.state;\n\n    return this.requestClient.getBaseURL().then(function (baseUrl) {\n      var link = baseUrl + _this.browserAuthRoutes.getAuthProviderLinkRedirectRoute(credential, redirectUrl, state, _this.deviceInfo);\n\n      return (StitchAuthImpl.injectedFetch ? StitchAuthImpl.injectedFetch : fetch)(new Request(link, {\n        credentials: \"include\",\n        headers: {\n          Authorization: \"Bearer \" + _this.authInfo.accessToken\n        },\n        mode: 'cors'\n      }));\n    }).then(function (response) {\n      _this.jsdomWindow.location.replace(response.headers.get(\"X-Stitch-Location\"));\n    });\n  };\n\n  StitchAuthImpl.prototype.hasRedirectResult = function () {\n    var isValid = false;\n\n    try {\n      isValid = this.parseRedirect().isValid;\n      return isValid;\n    } catch (_) {\n      return false;\n    } finally {\n      if (!isValid) {\n        this.cleanupRedirect();\n      }\n    }\n  };\n\n  StitchAuthImpl.prototype.handleRedirectResult = function () {\n    try {\n      var providerName = this.authStorage.get(RedirectKeys.ProviderName);\n      var providerType = this.authStorage.get(RedirectKeys.ProviderType);\n      var redirectFragment = this.parseRedirect();\n      return this.loginWithCredentialInternal(new StitchAuthResponseCredential(this.processRedirectResult(redirectFragment), providerType, providerName, redirectFragment.asLink)).then(function (user) {\n        return user;\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n\n  StitchAuthImpl.prototype.linkWithCredential = function (user, credential) {\n    return _super.prototype.linkUserWithCredentialInternal.call(this, user, credential);\n  };\n\n  StitchAuthImpl.prototype.logout = function () {\n    if (arguments.length > 0) {\n      return Promise.reject(new StitchClientError(StitchClientErrorCode.UnexpectedArguments));\n    }\n\n    return _super.prototype.logoutInternal.call(this);\n  };\n\n  StitchAuthImpl.prototype.logoutUserWithId = function (userId) {\n    return _super.prototype.logoutUserWithIdInternal.call(this, userId);\n  };\n\n  StitchAuthImpl.prototype.removeUser = function () {\n    if (arguments.length > 0) {\n      return Promise.reject(new StitchClientError(StitchClientErrorCode.UnexpectedArguments));\n    }\n\n    return _super.prototype.removeUserInternal.call(this);\n  };\n\n  StitchAuthImpl.prototype.removeUserWithId = function (userId) {\n    return _super.prototype.removeUserWithIdInternal.call(this, userId);\n  };\n\n  Object.defineProperty(StitchAuthImpl.prototype, \"deviceInfo\", {\n    get: function () {\n      var info = {};\n\n      if (this.hasDeviceId) {\n        info[DeviceFields.DEVICE_ID] = this.deviceId;\n      }\n\n      if (this.appInfo.localAppName !== undefined) {\n        info[DeviceFields.APP_ID] = this.appInfo.localAppName;\n      }\n\n      if (this.appInfo.localAppVersion !== undefined) {\n        info[DeviceFields.APP_VERSION] = this.appInfo.localAppVersion;\n      }\n\n      var browser = detect();\n\n      if (browser) {\n        info[DeviceFields.PLATFORM] = browser.name;\n        info[DeviceFields.PLATFORM_VERSION] = browser.version;\n      } else {\n        info[DeviceFields.PLATFORM] = \"web\";\n        info[DeviceFields.PLATFORM_VERSION] = \"0.0.0\";\n      }\n\n      info[DeviceFields.SDK_VERSION] = version;\n      return info;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StitchAuthImpl.prototype.addAuthListener = function (listener) {\n    this.listeners.add(listener);\n    this.onAuthEvent(listener);\n    this.dispatchAuthEvent({\n      kind: AuthEventKind.ListenerRegistered\n    });\n  };\n\n  StitchAuthImpl.prototype.addSynchronousAuthListener = function (listener) {\n    this.listeners.add(listener);\n    this.onAuthEvent(listener);\n    this.dispatchAuthEvent({\n      kind: AuthEventKind.ListenerRegistered\n    });\n  };\n\n  StitchAuthImpl.prototype.removeAuthListener = function (listener) {\n    this.listeners.delete(listener);\n  };\n\n  StitchAuthImpl.prototype.onAuthEvent = function (listener) {\n    var _this = this;\n\n    if (listener) {\n      var _1 = new Promise(function (resolve) {\n        if (listener.onAuthEvent) {\n          listener.onAuthEvent(_this);\n        }\n\n        resolve(undefined);\n      });\n    } else {\n      this.listeners.forEach(function (one) {\n        _this.onAuthEvent(one);\n      });\n    }\n  };\n\n  StitchAuthImpl.prototype.dispatchAuthEvent = function (event) {\n    var _this = this;\n\n    switch (event.kind) {\n      case AuthEventKind.ActiveUserChanged:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onActiveUserChanged) {\n            listener.onActiveUserChanged(_this, event.currentActiveUser, event.previousActiveUser);\n          }\n        });\n        break;\n\n      case AuthEventKind.ListenerRegistered:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onListenerRegistered) {\n            listener.onListenerRegistered(_this);\n          }\n        });\n        break;\n\n      case AuthEventKind.UserAdded:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onUserAdded) {\n            listener.onUserAdded(_this, event.addedUser);\n          }\n        });\n        break;\n\n      case AuthEventKind.UserLinked:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onUserLinked) {\n            listener.onUserLinked(_this, event.linkedUser);\n          }\n        });\n        break;\n\n      case AuthEventKind.UserLoggedIn:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onUserLoggedIn) {\n            listener.onUserLoggedIn(_this, event.loggedInUser);\n          }\n        });\n        break;\n\n      case AuthEventKind.UserLoggedOut:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onUserLoggedOut) {\n            listener.onUserLoggedOut(_this, event.loggedOutUser);\n          }\n        });\n        break;\n\n      case AuthEventKind.UserRemoved:\n        this.dispatchBlockToListeners(function (listener) {\n          if (listener.onUserRemoved) {\n            listener.onUserRemoved(_this, event.removedUser);\n          }\n        });\n        break;\n\n      default:\n        return this.assertNever(event);\n    }\n  };\n\n  StitchAuthImpl.prototype.assertNever = function (x) {\n    throw new Error(\"unexpected object: \" + x);\n  };\n\n  StitchAuthImpl.prototype.dispatchBlockToListeners = function (block) {\n    this.synchronousListeners.forEach(block);\n    this.listeners.forEach(function (listener) {\n      var _ = new Promise(function (resolve) {\n        block(listener);\n        resolve(undefined);\n      });\n    });\n  };\n\n  StitchAuthImpl.prototype.cleanupRedirect = function () {\n    this.jsdomWindow.history.replaceState(null, \"\", this.pageRootUrl());\n    this.authStorage.remove(RedirectKeys.State);\n    this.authStorage.remove(RedirectKeys.ProviderName);\n    this.authStorage.remove(RedirectKeys.ProviderType);\n  };\n\n  StitchAuthImpl.prototype.parseRedirect = function () {\n    if (typeof this.jsdomWindow === \"undefined\") {\n      throw new StitchRedirectError(\"running in a non-browser environment\");\n    }\n\n    if (!this.jsdomWindow.location || !this.jsdomWindow.location.hash) {\n      throw new StitchRedirectError(\"window location hash was undefined\");\n    }\n\n    var ourState = this.authStorage.get(RedirectKeys.State);\n    var redirectFragment = this.jsdomWindow.location.hash.substring(1);\n    return parseRedirectFragment(redirectFragment, ourState, this.appInfo.clientAppId);\n  };\n\n  StitchAuthImpl.prototype.processRedirectResult = function (redirectFragment) {\n    try {\n      if (!redirectFragment.isValid) {\n        throw new StitchRedirectError(\"invalid redirect result\");\n      }\n\n      if (redirectFragment.lastError) {\n        throw new StitchRedirectError(\"error handling redirect: \" + redirectFragment.lastError);\n      }\n\n      if (!redirectFragment.authInfo) {\n        throw new StitchRedirectError(\"no user auth value was found: it could not be decoded from fragment\");\n      }\n    } catch (err) {\n      throw err;\n    } finally {\n      this.cleanupRedirect();\n    }\n\n    return redirectFragment.authInfo;\n  };\n\n  StitchAuthImpl.prototype.prepareRedirect = function (credential) {\n    this.authStorage.set(RedirectKeys.ProviderName, credential.providerName);\n    this.authStorage.set(RedirectKeys.ProviderType, credential.providerType);\n    var redirectUrl = credential.redirectUrl;\n\n    if (redirectUrl === undefined) {\n      redirectUrl = this.pageRootUrl();\n    }\n\n    var state = generateState();\n    this.authStorage.set(RedirectKeys.State, state);\n    return {\n      redirectUrl: redirectUrl,\n      state: state\n    };\n  };\n\n  StitchAuthImpl.prototype.pageRootUrl = function () {\n    return [this.jsdomWindow.location.protocol, \"//\", this.jsdomWindow.location.host, this.jsdomWindow.location.pathname].join(\"\");\n  };\n\n  return StitchAuthImpl;\n}(CoreStitchAuth);\n\nexport default StitchAuthImpl;\n\nfunction generateState() {\n  var state = \"\";\n\n  for (var i = 0; i < 64; ++i) {\n    state += alphaNumericCharacters.charAt(Math.floor(Math.random() * alphaNumericCharacters.length));\n  }\n\n  return state;\n}\n\nfunction unmarshallUserAuth(data) {\n  var parts = data.split(\"$\");\n\n  if (parts.length !== 4) {\n    throw new StitchRedirectError(\"invalid user auth data provided while \" + \"marshalling user authentication data: \" + data);\n  }\n\n  var _a = __read(parts, 4),\n      accessToken = _a[0],\n      refreshToken = _a[1],\n      userId = _a[2],\n      deviceId = _a[3];\n\n  return new AuthInfo(userId, deviceId, accessToken, refreshToken);\n}\n\nvar ParsedRedirectFragment = function () {\n  function ParsedRedirectFragment() {\n    this.stateValid = false;\n    this.clientAppIdValid = false;\n    this.asLink = false;\n  }\n\n  Object.defineProperty(ParsedRedirectFragment.prototype, \"isValid\", {\n    get: function () {\n      return this.stateValid && this.clientAppIdValid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ParsedRedirectFragment;\n}();\n\nfunction parseRedirectFragment(fragment, ourState, ourClientAppId) {\n  var vars = fragment.split(\"&\");\n  var result = new ParsedRedirectFragment();\n  vars.forEach(function (kvp) {\n    var pairParts = kvp.split(\"=\");\n    var pairKey = decodeURIComponent(pairParts[0]);\n\n    switch (pairKey) {\n      case RedirectFragmentFields.StitchError:\n        result.lastError = decodeURIComponent(pairParts[1]);\n        break;\n\n      case RedirectFragmentFields.UserAuth:\n        try {\n          result.authInfo = unmarshallUserAuth(decodeURIComponent(pairParts[1]));\n        } catch (e) {\n          result.lastError = e;\n        }\n\n        break;\n\n      case RedirectFragmentFields.StitchLink:\n        if (pairParts[1] === \"ok\") {\n          result.asLink = true;\n        }\n\n        break;\n\n      case RedirectFragmentFields.State:\n        var theirState = decodeURIComponent(pairParts[1]);\n\n        if (ourState === theirState) {\n          result.stateValid = true;\n        }\n\n        break;\n\n      case RedirectFragmentFields.ClientAppId:\n        var clientAppId = decodeURIComponent(pairParts[1]);\n\n        if (ourClientAppId === clientAppId) {\n          result.clientAppIdValid = true;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  });\n  return result;\n}\n\nfunction isAuthProviderClientFactory(factory) {\n  return factory.getClient !== undefined;\n}","map":null,"metadata":{},"sourceType":"module"}