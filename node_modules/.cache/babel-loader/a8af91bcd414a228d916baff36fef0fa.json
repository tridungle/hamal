{"ast":null,"code":"import { Assertions } from \"mongodb-stitch-core-sdk\";\nimport { operationTypeFromRemote } from \"../OperationType\";\nimport RemoteInsertManyResult from \"../RemoteInsertManyResult\";\nvar RemoteInsertManyResultFields;\n\n(function (RemoteInsertManyResultFields) {\n  RemoteInsertManyResultFields[\"InsertedIds\"] = \"insertedIds\";\n})(RemoteInsertManyResultFields || (RemoteInsertManyResultFields = {}));\n\nvar RemoteInsertOneResultFields;\n\n(function (RemoteInsertOneResultFields) {\n  RemoteInsertOneResultFields[\"InsertedId\"] = \"insertedId\";\n})(RemoteInsertOneResultFields || (RemoteInsertOneResultFields = {}));\n\nvar RemoteUpdateResultFields;\n\n(function (RemoteUpdateResultFields) {\n  RemoteUpdateResultFields[\"MatchedCount\"] = \"matchedCount\";\n  RemoteUpdateResultFields[\"ModifiedCount\"] = \"modifiedCount\";\n  RemoteUpdateResultFields[\"UpsertedId\"] = \"upsertedId\";\n})(RemoteUpdateResultFields || (RemoteUpdateResultFields = {}));\n\nvar RemoteDeleteResultFields;\n\n(function (RemoteDeleteResultFields) {\n  RemoteDeleteResultFields[\"DeletedCount\"] = \"deletedCount\";\n})(RemoteDeleteResultFields || (RemoteDeleteResultFields = {}));\n\nvar UpdateDescriptionFields;\n\n(function (UpdateDescriptionFields) {\n  UpdateDescriptionFields[\"UpdatedFields\"] = \"updatedFields\";\n  UpdateDescriptionFields[\"RemovedFields\"] = \"removedFields\";\n})(UpdateDescriptionFields || (UpdateDescriptionFields = {}));\n\nvar ChangeEventFields;\n\n(function (ChangeEventFields) {\n  ChangeEventFields[\"Id\"] = \"_id\";\n  ChangeEventFields[\"OperationType\"] = \"operationType\";\n  ChangeEventFields[\"FullDocument\"] = \"fullDocument\";\n  ChangeEventFields[\"DocumentKey\"] = \"documentKey\";\n  ChangeEventFields[\"Namespace\"] = \"ns\";\n  ChangeEventFields[\"NamespaceDb\"] = \"db\";\n  ChangeEventFields[\"NamespaceColl\"] = \"coll\";\n  ChangeEventFields[\"UpdateDescription\"] = \"updateDescription\";\n})(ChangeEventFields || (ChangeEventFields = {}));\n\nvar CompactChangeEventFields;\n\n(function (CompactChangeEventFields) {\n  CompactChangeEventFields[\"OperationType\"] = \"ot\";\n  CompactChangeEventFields[\"FullDocument\"] = \"fd\";\n  CompactChangeEventFields[\"DocumentKey\"] = \"dk\";\n  CompactChangeEventFields[\"UpdateDescription\"] = \"ud\";\n  CompactChangeEventFields[\"StitchDocumentVersion\"] = \"sdv\";\n  CompactChangeEventFields[\"StitchDocumentHash\"] = \"sdh\";\n})(CompactChangeEventFields || (CompactChangeEventFields = {}));\n\nvar RemoteInsertManyResultDecoder = function () {\n  function RemoteInsertManyResultDecoder() {}\n\n  RemoteInsertManyResultDecoder.prototype.decode = function (from) {\n    return new RemoteInsertManyResult(from[RemoteInsertManyResultFields.InsertedIds]);\n  };\n\n  return RemoteInsertManyResultDecoder;\n}();\n\nvar RemoteInsertOneResultDecoder = function () {\n  function RemoteInsertOneResultDecoder() {}\n\n  RemoteInsertOneResultDecoder.prototype.decode = function (from) {\n    return {\n      insertedId: from[RemoteInsertOneResultFields.InsertedId]\n    };\n  };\n\n  return RemoteInsertOneResultDecoder;\n}();\n\nvar RemoteUpdateResultDecoder = function () {\n  function RemoteUpdateResultDecoder() {}\n\n  RemoteUpdateResultDecoder.prototype.decode = function (from) {\n    return {\n      matchedCount: from[RemoteUpdateResultFields.MatchedCount],\n      modifiedCount: from[RemoteUpdateResultFields.ModifiedCount],\n      upsertedId: from[RemoteUpdateResultFields.UpsertedId]\n    };\n  };\n\n  return RemoteUpdateResultDecoder;\n}();\n\nvar RemoteDeleteResultDecoder = function () {\n  function RemoteDeleteResultDecoder() {}\n\n  RemoteDeleteResultDecoder.prototype.decode = function (from) {\n    return {\n      deletedCount: from[RemoteDeleteResultFields.DeletedCount]\n    };\n  };\n\n  return RemoteDeleteResultDecoder;\n}();\n\nvar UpdateDescriptionDecoder = function () {\n  function UpdateDescriptionDecoder() {}\n\n  UpdateDescriptionDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(UpdateDescriptionFields.UpdatedFields, from);\n    Assertions.keyPresent(UpdateDescriptionFields.RemovedFields, from);\n    return {\n      removedFields: from[UpdateDescriptionFields.RemovedFields],\n      updatedFields: from[UpdateDescriptionFields.UpdatedFields]\n    };\n  };\n\n  return UpdateDescriptionDecoder;\n}();\n\nfunction decodeBaseChangeEventFields(from, updateDescriptionField, fullDocumentField, decoder) {\n  var updateDescription;\n\n  if (updateDescriptionField in from) {\n    updateDescription = ResultDecoders.updateDescriptionDecoder.decode(from[updateDescriptionField]);\n  } else {\n    updateDescription = undefined;\n  }\n\n  var fullDocument;\n\n  if (fullDocumentField in from) {\n    fullDocument = from[fullDocumentField];\n\n    if (decoder) {\n      fullDocument = decoder.decode(fullDocument);\n    }\n  } else {\n    fullDocument = undefined;\n  }\n\n  return {\n    updateDescription: updateDescription,\n    fullDocument: fullDocument\n  };\n}\n\nvar ChangeEventDecoder = function () {\n  function ChangeEventDecoder(decoder) {\n    this.decoder = decoder;\n  }\n\n  ChangeEventDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(ChangeEventFields.Id, from);\n    Assertions.keyPresent(ChangeEventFields.OperationType, from);\n    Assertions.keyPresent(ChangeEventFields.Namespace, from);\n    Assertions.keyPresent(ChangeEventFields.DocumentKey, from);\n    var nsDoc = from[ChangeEventFields.Namespace];\n\n    var _a = decodeBaseChangeEventFields(from, ChangeEventFields.UpdateDescription, ChangeEventFields.FullDocument, this.decoder),\n        updateDescription = _a.updateDescription,\n        fullDocument = _a.fullDocument;\n\n    return {\n      documentKey: from[ChangeEventFields.DocumentKey],\n      fullDocument: fullDocument,\n      id: from[ChangeEventFields.Id],\n      namespace: {\n        collection: nsDoc[ChangeEventFields.NamespaceColl],\n        database: nsDoc[ChangeEventFields.NamespaceDb]\n      },\n      operationType: operationTypeFromRemote(from[ChangeEventFields.OperationType]),\n      updateDescription: updateDescription\n    };\n  };\n\n  return ChangeEventDecoder;\n}();\n\nvar CompactChangeEventDecoder = function () {\n  function CompactChangeEventDecoder(decoder) {\n    this.decoder = decoder;\n  }\n\n  CompactChangeEventDecoder.prototype.decode = function (from) {\n    Assertions.keyPresent(CompactChangeEventFields.OperationType, from);\n    Assertions.keyPresent(CompactChangeEventFields.DocumentKey, from);\n\n    var _a = decodeBaseChangeEventFields(from, CompactChangeEventFields.UpdateDescription, CompactChangeEventFields.FullDocument, this.decoder),\n        updateDescription = _a.updateDescription,\n        fullDocument = _a.fullDocument;\n\n    var stitchDocumentVersion;\n\n    if (CompactChangeEventFields.StitchDocumentVersion in from) {\n      stitchDocumentVersion = from[CompactChangeEventFields.StitchDocumentVersion];\n    } else {\n      stitchDocumentVersion = undefined;\n    }\n\n    var stitchDocumentHash;\n\n    if (CompactChangeEventFields.StitchDocumentHash in from) {\n      stitchDocumentHash = from[CompactChangeEventFields.StitchDocumentHash];\n    } else {\n      stitchDocumentHash = undefined;\n    }\n\n    return {\n      documentKey: from[CompactChangeEventFields.DocumentKey],\n      fullDocument: fullDocument,\n      operationType: operationTypeFromRemote(from[CompactChangeEventFields.OperationType]),\n      stitchDocumentHash: stitchDocumentHash,\n      stitchDocumentVersion: stitchDocumentVersion,\n      updateDescription: updateDescription\n    };\n  };\n\n  return CompactChangeEventDecoder;\n}();\n\nvar ResultDecoders = function () {\n  function ResultDecoders() {}\n\n  ResultDecoders.remoteInsertManyResultDecoder = new RemoteInsertManyResultDecoder();\n  ResultDecoders.remoteInsertOneResultDecoder = new RemoteInsertOneResultDecoder();\n  ResultDecoders.remoteUpdateResultDecoder = new RemoteUpdateResultDecoder();\n  ResultDecoders.remoteDeleteResultDecoder = new RemoteDeleteResultDecoder();\n  ResultDecoders.updateDescriptionDecoder = new UpdateDescriptionDecoder();\n  ResultDecoders.ChangeEventDecoder = ChangeEventDecoder;\n  ResultDecoders.CompactChangeEventDecoder = CompactChangeEventDecoder;\n  return ResultDecoders;\n}();\n\nexport default ResultDecoders;","map":null,"metadata":{},"sourceType":"module"}