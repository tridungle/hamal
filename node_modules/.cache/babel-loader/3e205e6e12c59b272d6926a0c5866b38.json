{"ast":null,"code":"var _templateObject = _taggedTemplateLiteralLoose([\"\\n  width: 100%;\\n  position: relative;\\n\"], [\"\\n  width: 100%;\\n  position: relative;\\n\"]);\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n/* global document */\n\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport List from \"./components/List\";\nvar Wrapper = styled.div(_templateObject);\n\nvar GooglePlacesSuggest = function (_React$Component) {\n  _inherits(GooglePlacesSuggest, _React$Component);\n\n  function GooglePlacesSuggest(props) {\n    _classCallCheck(this, GooglePlacesSuggest);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this));\n\n    _this.hasFocus = false;\n    _this.state = {\n      focusedPredictionIndex: 0,\n      predictions: [],\n      open: !!props.autocompletionRequest && props.autocompletionRequest.input\n    };\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.onFocusChange = _this.onFocusChange.bind(_this);\n    _this.handleDOMClick = _this.handleDOMClick.bind(_this);\n    return _this;\n  }\n\n  GooglePlacesSuggest.prototype.componentWillMount = function componentWillMount() {\n    this.updatePredictions(this.props.autocompletionRequest);\n    document.addEventListener(\"click\", this.handleDOMClick);\n  };\n\n  GooglePlacesSuggest.prototype.componentWillUnmount = function componentWillUnmount() {\n    document.removeEventListener(\"click\", this.handleDOMClick);\n  };\n\n  GooglePlacesSuggest.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (this.props.autocompletionRequest !== nextProps.autocompletionRequest && nextProps.autocompletionRequest) {\n      this.updatePredictions(nextProps.autocompletionRequest);\n    }\n  };\n\n  GooglePlacesSuggest.prototype.handleSelectPrediction = function handleSelectPrediction(suggest) {\n    var _this2 = this;\n\n    var onSelectSuggest = this.props.onSelectSuggest;\n    this.setState({\n      open: false,\n      predictions: []\n    }, function () {\n      _this2.hasFocus = false;\n\n      _this2.geocodePrediction(suggest.description, function (result) {\n        onSelectSuggest(result, suggest);\n      });\n    });\n  };\n\n  GooglePlacesSuggest.prototype.updatePredictions = function updatePredictions(autocompletionRequest) {\n    var _this3 = this;\n\n    var googleMaps = this.props.googleMaps;\n    var autocompleteService = new googleMaps.places.AutocompleteService();\n\n    if (!autocompletionRequest || !autocompletionRequest.input) {\n      this.setState({\n        open: false,\n        predictions: []\n      }, function () {\n        return _this3.hasFocus = false;\n      });\n      return;\n    }\n\n    autocompleteService.getPlacePredictions(autocompletionRequest, // https://developers.google.com/maps/documentation/javascript/reference?hl=fr#AutocompletionRequest\n    function (predictions, status) {\n      _this3.props.onStatusUpdate(status);\n\n      if (!predictions) {\n        _this3.setState({\n          open: true,\n          predictions: []\n        });\n\n        return;\n      }\n\n      _this3.setState({\n        focusedPredictionIndex: 0,\n        open: true,\n        predictions: predictions\n      });\n    });\n  };\n\n  GooglePlacesSuggest.prototype.geocodePrediction = function geocodePrediction(address, callback) {\n    var googleMaps = this.props.googleMaps;\n    var geocoder = new googleMaps.Geocoder();\n    geocoder.geocode({\n      address: address\n    }, function (results, status) {\n      if (status === googleMaps.GeocoderStatus.OK) {\n        if (results.length > 0) {\n          callback(results[0]);\n        }\n      } else {\n        // eslint-disable-next-line\n        console.error(\"Geocode error: \" + status);\n      }\n    });\n  };\n\n  GooglePlacesSuggest.prototype.handleKeyDown = function handleKeyDown(e) {\n    var _state = this.state,\n        focusedPredictionIndex = _state.focusedPredictionIndex,\n        predictions = _state.predictions;\n\n    if (predictions.length > 0) {\n      if (e.key === \"Enter\") {\n        this.handleSelectPrediction(predictions[focusedPredictionIndex]);\n      } else if (e.key === \"ArrowUp\") {\n        if (predictions.length > 0 && focusedPredictionIndex > 0) {\n          this.focusPrediction(focusedPredictionIndex - 1);\n        }\n      } else if (e.key === \"ArrowDown\") {\n        if (predictions.length > 0 && focusedPredictionIndex < predictions.length - 1) {\n          this.focusPrediction(focusedPredictionIndex + 1);\n        }\n      }\n    } else if (e.key === \"Enter\") {\n      var onNoResult = this.props.onNoResult;\n      onNoResult();\n    }\n  };\n\n  GooglePlacesSuggest.prototype.focusPrediction = function focusPrediction(index) {\n    this.setState({\n      focusedPredictionIndex: index\n    });\n  };\n\n  GooglePlacesSuggest.prototype.onFocusChange = function onFocusChange(val) {\n    this.hasFocus = val;\n  };\n\n  GooglePlacesSuggest.prototype.handleDOMClick = function handleDOMClick() {\n    if (!this.hasFocus && this.state.open) {\n      this.setState({\n        open: false\n      });\n    }\n  };\n\n  GooglePlacesSuggest.prototype.render = function render() {\n    var _this4 = this;\n\n    var _state2 = this.state,\n        focusedPredictionIndex = _state2.focusedPredictionIndex,\n        open = _state2.open,\n        predictions = _state2.predictions;\n    var _props = this.props,\n        children = _props.children,\n        customContainerRender = _props.customContainerRender,\n        customRender = _props.customRender,\n        displayPoweredByGoogle = _props.displayPoweredByGoogle,\n        textNoResults = _props.textNoResults;\n    return React.createElement(Wrapper, {\n      onKeyDown: this.handleKeyDown\n    }, children, open && React.createElement(List, {\n      items: predictions,\n      activeItemIndex: focusedPredictionIndex,\n      customContainerRender: customContainerRender,\n      customRender: customRender,\n      displayPoweredByGoogle: displayPoweredByGoogle,\n      onSelect: function onSelect(suggest) {\n        return _this4.handleSelectPrediction(suggest);\n      },\n      textNoResults: textNoResults,\n      onFocusChange: this.onFocusChange\n    }));\n  };\n\n  return GooglePlacesSuggest;\n}(React.Component);\n\nGooglePlacesSuggest.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.any.isRequired,\n  googleMaps: PropTypes.object.isRequired,\n  onNoResult: PropTypes.func,\n  onSelectSuggest: PropTypes.func,\n  onStatusUpdate: PropTypes.func,\n  customContainerRender: PropTypes.func,\n  customRender: PropTypes.func,\n  displayPoweredByGoogle: PropTypes.bool,\n  autocompletionRequest: PropTypes.shape({\n    input: PropTypes.string.isRequired\n  }).isRequired,\n  textNoResults: PropTypes.string\n} : {};\nGooglePlacesSuggest.defaultProps = {\n  displayPoweredByGoogle: true,\n  onNoResult: function onNoResult() {},\n  onSelectSuggest: function onSelectSuggest() {},\n  onStatusUpdate: function onStatusUpdate() {},\n  textNoResults: \"No results\"\n};\nexport default GooglePlacesSuggest;","map":null,"metadata":{},"sourceType":"module"}