{"ast":null,"code":"var _jsxFileName = \"/Users/danhalperin/Desktop/hamal/src/newAppForm.js\";\nimport React, { Component } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport GoogleMapLoader from \"react-google-maps-loader\";\nimport GooglePlacesSuggest from \"react-google-places-suggest\";\nimport \"./App.css\";\nimport Lottie from \"react-lottie\";\nimport * as animationData from \"./jsons/search.json\";\nimport { FiHome } from \"react-icons/fi\";\nconst defaultOptions = {\n  loop: false,\n  autoplay: true,\n  animationData: animationData.default,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n};\nconst MY_API_KEY = \"AIzaSyDkG702RFFEEm08CP87sLK_amm-ru_eUVs\";\nexport default class NewAppForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = e => {\n      this.setState({\n        search: e.target.value,\n        value: e.target.value\n      });\n    };\n\n    this.handleSelectSuggest = (geocodedPrediction, originalPrediction) => {\n      this.setState({\n        search: \"\",\n        value: geocodedPrediction.formatted_address,\n        selected: true\n      });\n    };\n\n    this.handleNoResult = () => {\n      console.log(\"No results for \", this.state.search);\n    };\n\n    this.handleStatusUpdate = status => {//console.log(status);\n    };\n\n    this.state = {\n      search: \"\",\n      value: \"\",\n      selected: undefined,\n      newAppInput: undefined\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          search = _this$state.search,\n          value = _this$state.value;\n    return React.createElement(FadeIn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(FiHome, {\n      onClick: () => this.props.changeApp(\"home\"),\n      style: {\n        position: \"absolute\",\n        top: \"10px\",\n        left: \"10px\",\n        cursor: \"pointer\",\n        fontSize: \"20px\",\n        zIndex: \"10000\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"mt-5\",\n      dir: \"ltr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Lottie, {\n      options: defaultOptions,\n      height: 200,\n      width: 200,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(GoogleMapLoader, {\n      params: {\n        key: MY_API_KEY,\n        libraries: \"places,geocode\"\n      },\n      render: googleMaps => googleMaps && React.createElement(GooglePlacesSuggest, {\n        googleMaps: googleMaps,\n        displayPoweredByGoogle: false,\n        autocompletionRequest: {\n          input: search // Optional options\n          // https://developers.google.com/maps/documentation/javascript/reference?hl=fr#AutocompletionRequest\n\n        } // Optional props\n        ,\n        onNoResult: this.handleNoResult,\n        onSelectSuggest: this.handleSelectSuggest,\n        onStatusUpdate: this.handleStatusUpdate,\n        textNoResults: \"No results.\" // null or \"\" if you want to disable the no results item\n        ,\n        customRender: prediction => React.createElement(\"div\", {\n          className: \"customWrapper\",\n          style: {\n            color: \"white\",\n            backgroundColor: \"#282c34\",\n            textAlign: \"left\",\n            padding: \"5px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, prediction ? prediction.description : \"No results.\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        style: {\n          padding: \"5px\",\n          backgroundColor: \"#282c34\",\n          color: \"white\",\n          border: \"1px solid white\"\n        },\n        type: \"text\",\n        value: value,\n        placeholder: \"Search a location...\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), this.state.selected ? React.createElement(FadeIn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      class: \"btn btn-outline-light mt-4 font-weight-bold\",\n      onClick: () => {\n        this.props.newApp(this.state.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"\\u05D4\\u05E7\\u05DE\\u05EA \\u05D7\\u05DE\\\"\\u05DC \\u05D7\\u05D3\\u05E9\")) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/danhalperin/Desktop/hamal/src/newAppForm.js"],"names":["React","Component","FadeIn","GoogleMapLoader","GooglePlacesSuggest","Lottie","animationData","FiHome","defaultOptions","loop","autoplay","default","rendererSettings","preserveAspectRatio","MY_API_KEY","NewAppForm","constructor","props","handleInputChange","e","setState","search","target","value","handleSelectSuggest","geocodedPrediction","originalPrediction","formatted_address","selected","handleNoResult","console","log","state","handleStatusUpdate","status","undefined","newAppInput","render","changeApp","position","top","left","cursor","fontSize","zIndex","key","libraries","googleMaps","input","prediction","color","backgroundColor","textAlign","padding","description","border","newApp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,KAAKC,aAAZ,MAA+B,qBAA/B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,IAAI,EAAE,KADe;AAErBC,EAAAA,QAAQ,EAAE,IAFW;AAGrBJ,EAAAA,aAAa,EAAEA,aAAa,CAACK,OAHR;AAIrBC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,mBAAmB,EAAE;AADL;AAJG,CAAvB;AASA,MAAMC,UAAU,GAAG,yCAAnB;AAEA,eAAe,MAAMC,UAAN,SAAyBd,SAAzB,CAAmC;AAChDe,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAUnBC,iBAVmB,GAUCC,CAAC,IAAI;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAEF,CAAC,CAACG,MAAF,CAASC,KAAnB;AAA0BA,QAAAA,KAAK,EAAEJ,CAAC,CAACG,MAAF,CAASC;AAA1C,OAAd;AACD,KAZkB;;AAAA,SAanBC,mBAbmB,GAaG,CAACC,kBAAD,EAAqBC,kBAArB,KAA4C;AAChE,WAAKN,QAAL,CAAc;AACZC,QAAAA,MAAM,EAAE,EADI;AAEZE,QAAAA,KAAK,EAAEE,kBAAkB,CAACE,iBAFd;AAGZC,QAAAA,QAAQ,EAAE;AAHE,OAAd;AAKD,KAnBkB;;AAAA,SAoBnBC,cApBmB,GAoBF,MAAM;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKC,KAAL,CAAWX,MAA1C;AACD,KAtBkB;;AAAA,SAuBnBY,kBAvBmB,GAuBEC,MAAM,IAAI,CAC7B;AACD,KAzBkB;;AAEjB,SAAKF,KAAL,GAAa;AACXX,MAAAA,MAAM,EAAE,EADG;AAEXE,MAAAA,KAAK,EAAE,EAFI;AAGXK,MAAAA,QAAQ,EAAEO,SAHC;AAIXC,MAAAA,WAAW,EAAED;AAJF,KAAb;AAMD;;AAmBDE,EAAAA,MAAM,GAAG;AAAA,wBACmB,KAAKL,KADxB;AAAA,UACCX,MADD,eACCA,MADD;AAAA,UACSE,KADT,eACSA,KADT;AAGP,WACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAE,MAAM,KAAKN,KAAL,CAAWqB,SAAX,CAAqB,MAArB,CADjB;AAEE,MAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,UADL;AAELC,QAAAA,GAAG,EAAE,MAFA;AAGLC,QAAAA,IAAI,EAAE,MAHD;AAILC,QAAAA,MAAM,EAAE,SAJH;AAKLC,QAAAA,QAAQ,EAAE,MALL;AAMLC,QAAAA,MAAM,EAAE;AANH,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAYE;AAAK,MAAA,KAAK,EAAC,MAAX;AAAkB,MAAA,GAAG,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEpC,cAAjB;AAAiC,MAAA,MAAM,EAAE,GAAzC;AAA8C,MAAA,KAAK,EAAE,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE,oBAAC,eAAD;AACE,MAAA,MAAM,EAAE;AACNqC,QAAAA,GAAG,EAAE/B,UADC;AAENgC,QAAAA,SAAS,EAAE;AAFL,OADV;AAKE,MAAA,MAAM,EAAEC,UAAU,IAChBA,UAAU,IACR,oBAAC,mBAAD;AACE,QAAA,UAAU,EAAEA,UADd;AAEE,QAAA,sBAAsB,EAAE,KAF1B;AAGE,QAAA,qBAAqB,EAAE;AACrBC,UAAAA,KAAK,EAAE3B,MADc,CAErB;AACA;;AAHqB,SAHzB,CAQE;AARF;AASE,QAAA,UAAU,EAAE,KAAKQ,cATnB;AAUE,QAAA,eAAe,EAAE,KAAKL,mBAVxB;AAWE,QAAA,cAAc,EAAE,KAAKS,kBAXvB;AAYE,QAAA,aAAa,EAAC,aAZhB,CAY8B;AAZ9B;AAaE,QAAA,YAAY,EAAEgB,UAAU,IACtB;AACE,UAAA,SAAS,EAAC,eADZ;AAEE,UAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE,OADF;AAELC,YAAAA,eAAe,EAAE,SAFZ;AAGLC,YAAAA,SAAS,EAAE,MAHN;AAILC,YAAAA,OAAO,EAAE;AAJJ,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASGJ,UAAU,GAAGA,UAAU,CAACK,WAAd,GAA4B,aATzC,CAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA2BE;AACE,QAAA,KAAK,EAAE;AACLD,UAAAA,OAAO,EAAE,KADJ;AAELF,UAAAA,eAAe,EAAE,SAFZ;AAGLD,UAAAA,KAAK,EAAE,OAHF;AAILK,UAAAA,MAAM,EAAE;AAJH,SADT;AAOE,QAAA,IAAI,EAAC,MAPP;AAQE,QAAA,KAAK,EAAEhC,KART;AASE,QAAA,WAAW,EAAC,sBATd;AAUE,QAAA,QAAQ,EAAE,KAAKL,iBAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3BF,CAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAZF,EAkEG,KAAKc,KAAL,CAAWJ,QAAX,GACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AAAEc,QAAAA,MAAM,EAAE;AAAV,OADT;AAEE,MAAA,KAAK,EAAC,6CAFR;AAGE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKzB,KAAL,CAAWuC,MAAX,CAAkB,KAAKxB,KAAL,CAAWT,KAA7B;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0EADF,CADD,GAYG,IA9EN,CADF;AAkFD;;AAjH+C","sourcesContent":["import React, { Component } from \"react\";\nimport FadeIn from \"react-fade-in\";\nimport GoogleMapLoader from \"react-google-maps-loader\";\nimport GooglePlacesSuggest from \"react-google-places-suggest\";\nimport \"./App.css\";\nimport Lottie from \"react-lottie\";\nimport * as animationData from \"./jsons/search.json\";\nimport { FiHome } from \"react-icons/fi\";\n\nconst defaultOptions = {\n  loop: false,\n  autoplay: true,\n  animationData: animationData.default,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n};\n\nconst MY_API_KEY = \"AIzaSyDkG702RFFEEm08CP87sLK_amm-ru_eUVs\";\n\nexport default class NewAppForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      value: \"\",\n      selected: undefined,\n      newAppInput: undefined\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({ search: e.target.value, value: e.target.value });\n  };\n  handleSelectSuggest = (geocodedPrediction, originalPrediction) => {\n    this.setState({\n      search: \"\",\n      value: geocodedPrediction.formatted_address,\n      selected: true\n    });\n  };\n  handleNoResult = () => {\n    console.log(\"No results for \", this.state.search);\n  };\n  handleStatusUpdate = status => {\n    //console.log(status);\n  };\n\n  render() {\n    const { search, value } = this.state;\n\n    return (\n      <FadeIn>\n        <FiHome\n          onClick={() => this.props.changeApp(\"home\")}\n          style={{\n            position: \"absolute\",\n            top: \"10px\",\n            left: \"10px\",\n            cursor: \"pointer\",\n            fontSize: \"20px\",\n            zIndex: \"10000\"\n          }}\n        />\n        <div class=\"mt-5\" dir=\"ltr\">\n          <Lottie options={defaultOptions} height={200} width={200} />\n\n          <GoogleMapLoader\n            params={{\n              key: MY_API_KEY,\n              libraries: \"places,geocode\"\n            }}\n            render={googleMaps =>\n              googleMaps && (\n                <GooglePlacesSuggest\n                  googleMaps={googleMaps}\n                  displayPoweredByGoogle={false}\n                  autocompletionRequest={{\n                    input: search\n                    // Optional options\n                    // https://developers.google.com/maps/documentation/javascript/reference?hl=fr#AutocompletionRequest\n                  }}\n                  // Optional props\n                  onNoResult={this.handleNoResult}\n                  onSelectSuggest={this.handleSelectSuggest}\n                  onStatusUpdate={this.handleStatusUpdate}\n                  textNoResults=\"No results.\" // null or \"\" if you want to disable the no results item\n                  customRender={prediction => (\n                    <div\n                      className=\"customWrapper\"\n                      style={{\n                        color: \"white\",\n                        backgroundColor: \"#282c34\",\n                        textAlign: \"left\",\n                        padding: \"5px\"\n                      }}\n                    >\n                      {prediction ? prediction.description : \"No results.\"}\n                    </div>\n                  )}\n                >\n                  <input\n                    style={{\n                      padding: \"5px\",\n                      backgroundColor: \"#282c34\",\n                      color: \"white\",\n                      border: \"1px solid white\"\n                    }}\n                    type=\"text\"\n                    value={value}\n                    placeholder=\"Search a location...\"\n                    onChange={this.handleInputChange}\n                  />\n                </GooglePlacesSuggest>\n              )\n            }\n          />\n        </div>\n        {this.state.selected ? (\n          <FadeIn>\n            <div\n              style={{ cursor: \"pointer\" }}\n              class=\"btn btn-outline-light mt-4 font-weight-bold\"\n              onClick={() => {\n                this.props.newApp(this.state.value);\n              }}\n            >\n              הקמת חמ\"ל חדש\n            </div>\n          </FadeIn>\n        ) : null}\n      </FadeIn>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}