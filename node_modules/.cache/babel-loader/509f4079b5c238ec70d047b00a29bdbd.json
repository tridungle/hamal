{"ast":null,"code":"var _jsxFileName = \"/Users/danhalperin/Desktop/hamal/src/entry.js\";\nimport React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { Stitch, RemoteMongoClient, AnonymousCredential } from \"mongodb-stitch-browser-sdk\";\nimport Content from \"./Content\";\nimport Sidebar from \"./Sidebar\";\nimport \"./App.css\";\nimport Geocode from \"react-geocode\";\nimport ReactLoading from \"react-loading\";\nGeocode.setApiKey(\"AIzaSyDkG702RFFEEm08CP87sLK_amm-ru_eUVs\");\nexport default class Entry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      app: \"home\",\n      apps: undefined,\n      sidebar: false\n    };\n    this.newApp = this.newApp.bind(this);\n    this.addPost = this.addPost.bind(this);\n    this.hideSidebar = this.hideSidebar.bind(this);\n    this.updateHebrew = this.updateHebrew.bind(this);\n    this.deleteApp = this.deleteApp.bind(this);\n    this.changeApp = this.changeApp.bind(this);\n  }\n\n  addPost(name, title, body) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(RemoteMongoClient.factory, \"template\");\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection.findOneAndUpdate({\n      appName: name\n    }, {\n      $push: {\n        posts: {\n          title: title,\n          body: body,\n          date: new Date()\n        }\n      }\n    }).then(() => {\n      collection.find({}, {\n        sort: {\n          date: -1\n        }\n      }).asArray().then(results => {\n        this.setState({\n          apps: results,\n          app: name\n        });\n      });\n    });\n  }\n\n  hideSidebar() {\n    this.setState({\n      sidebar: !this.state.sidebar\n    });\n  }\n\n  componentWillMount() {\n    Stitch.initializeDefaultAppClient(\"dantemplate-qecvm\");\n    const client = Stitch.defaultAppClient;\n    client.auth.loginWithCredential(new AnonymousCredential()).then(user => {\n      const mongodb = client.getServiceClient(RemoteMongoClient.factory, \"template\");\n      var db = mongodb.db(\"Infrastructure\");\n      var collection = db.collection(\"Apps\");\n      collection.find({}, {\n        sort: {\n          date: -1\n        }\n      }).asArray().then(results => {\n        this.setState({\n          apps: results\n        });\n      });\n    });\n  }\n\n  newApp(name) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(RemoteMongoClient.factory, \"template\");\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    Geocode.fromAddress(name).then(response => {\n      console.log(response.results[0]);\n      var arrAddress = response.results[0].address_components;\n      var itemLocality = \"\";\n      var itemCountry = \"\";\n\n      for (var i = 0; i < arrAddress.length; i++) {\n        if (arrAddress[i].types[0] === \"locality\") {\n          itemLocality = arrAddress[i].long_name;\n        }\n\n        if (arrAddress[i].types[0] === \"country\") {\n          itemCountry = arrAddress[i].long_name;\n        }\n      }\n\n      if (itemLocality === \"\") {\n        itemLocality = name;\n      }\n\n      console.log(\"City: \" + itemLocality);\n      const _response$results$0$g = response.results[0].geometry.location,\n            lat = _response$results$0$g.lat,\n            lng = _response$results$0$g.lng;\n      collection.insertOne({\n        appName: name,\n        city: itemLocality,\n        country: itemCountry,\n        latitude: lat,\n        longitude: lng,\n        bounds: response.results[0].geometry.viewport,\n        date: new Date()\n      }).then(() => {\n        collection.find({}, {\n          sort: {\n            date: -1\n          }\n        }).asArray().then(results => {\n          this.setState({\n            apps: results,\n            app: name\n          });\n        });\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  deleteApp(name) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(RemoteMongoClient.factory, \"template\");\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection.findOneAndDelete({\n      appName: name\n    }).then(() => {\n      collection.find({}, {\n        sort: {\n          date: -1\n        }\n      }).asArray().then(results => {\n        this.setState({\n          app: \"home\",\n          apps: results\n        });\n      });\n    });\n  }\n\n  updateHebrew(name, myparam, newValue) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(RemoteMongoClient.factory, \"template\");\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection.findOneAndUpdate({\n      appName: name\n    }, {\n      $set: {\n        hebrew: newValue\n      }\n    }, {\n      upsert: \"true\"\n    }).then(() => {\n      collection.find({}, {\n        sort: {\n          date: -1\n        }\n      }).asArray().then(results => {\n        console.log(\"updated\");\n        this.setState({\n          app: name,\n          apps: results\n        });\n      });\n    });\n  }\n\n  changeApp(app) {\n    this.setState({\n      app: app\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.state.apps ? React.createElement(\"div\", {\n      class: \"wrapper\",\n      dir: \"rtl\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.state.sidebar ? React.createElement(Sidebar, {\n      deleteApp: this.deleteApp,\n      newApp: this.newApp,\n      apps: this.state.apps,\n      app: this.state.app,\n      changeApp: this.changeApp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }) : null, React.createElement(Content, {\n      hideSidebar: this.hideSidebar,\n      deleteApp: this.deleteApp,\n      newApp: this.newApp,\n      app: this.state.app,\n      apps: this.state.apps,\n      updateHebrew: this.updateHebrew,\n      addPost: this.addPost,\n      changeApp: this.changeApp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      class: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(ReactLoading, {\n      type: \"bars\",\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/danhalperin/Desktop/hamal/src/entry.js"],"names":["React","Component","Stitch","RemoteMongoClient","AnonymousCredential","Content","Sidebar","Geocode","ReactLoading","setApiKey","Entry","constructor","props","state","app","apps","undefined","sidebar","newApp","bind","addPost","hideSidebar","updateHebrew","deleteApp","changeApp","name","title","body","client","defaultAppClient","mongodb","getServiceClient","factory","db","collection","findOneAndUpdate","appName","$push","posts","date","Date","then","find","sort","asArray","results","setState","componentWillMount","initializeDefaultAppClient","auth","loginWithCredential","user","fromAddress","response","console","log","arrAddress","address_components","itemLocality","itemCountry","i","length","types","long_name","geometry","location","lat","lng","insertOne","city","country","latitude","longitude","bounds","viewport","error","findOneAndDelete","myparam","newValue","$set","hebrew","upsert","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport {\n  Stitch,\n  RemoteMongoClient,\n  AnonymousCredential\n} from \"mongodb-stitch-browser-sdk\";\nimport Content from \"./Content\";\nimport Sidebar from \"./Sidebar\";\nimport \"./App.css\";\nimport Geocode from \"react-geocode\";\nimport ReactLoading from \"react-loading\";\n\nGeocode.setApiKey(\"AIzaSyDkG702RFFEEm08CP87sLK_amm-ru_eUVs\");\n\nexport default class Entry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      app: \"home\",\n      apps: undefined,\n      sidebar: false\n    };\n    this.newApp = this.newApp.bind(this);\n    this.addPost = this.addPost.bind(this);\n    this.hideSidebar = this.hideSidebar.bind(this);\n    this.updateHebrew = this.updateHebrew.bind(this);\n    this.deleteApp = this.deleteApp.bind(this);\n    this.changeApp = this.changeApp.bind(this);\n  }\n  addPost(name, title, body) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"template\"\n    );\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection\n      .findOneAndUpdate(\n        { appName: name },\n        {\n          $push: {\n            posts: {\n              title: title,\n              body: body,\n              date: new Date()\n            }\n          }\n        }\n      )\n      .then(() => {\n        collection\n          .find({}, { sort: { date: -1 } })\n          .asArray()\n          .then(results => {\n            this.setState({\n              apps: results,\n              app: name\n            });\n          });\n      });\n  }\n  hideSidebar() {\n    this.setState({ sidebar: !this.state.sidebar });\n  }\n  componentWillMount() {\n    Stitch.initializeDefaultAppClient(\"dantemplate-qecvm\");\n    const client = Stitch.defaultAppClient;\n    client.auth.loginWithCredential(new AnonymousCredential()).then(user => {\n      const mongodb = client.getServiceClient(\n        RemoteMongoClient.factory,\n        \"template\"\n      );\n      var db = mongodb.db(\"Infrastructure\");\n      var collection = db.collection(\"Apps\");\n      collection\n        .find({}, { sort: { date: -1 } })\n        .asArray()\n        .then(results => {\n          this.setState({\n            apps: results\n          });\n        });\n    });\n  }\n  newApp(name) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"template\"\n    );\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    Geocode.fromAddress(name).then(\n      response => {\n        console.log(response.results[0]);\n        var arrAddress = response.results[0].address_components;\n        var itemLocality = \"\";\n        var itemCountry = \"\";\n\n        for (var i = 0; i < arrAddress.length; i++) {\n          if (arrAddress[i].types[0] === \"locality\") {\n            itemLocality = arrAddress[i].long_name;\n          }\n          if (arrAddress[i].types[0] === \"country\") {\n            itemCountry = arrAddress[i].long_name;\n          }\n        }\n        if (itemLocality === \"\") {\n          itemLocality = name;\n        }\n        console.log(\"City: \" + itemLocality);\n        const { lat, lng } = response.results[0].geometry.location;\n        collection\n          .insertOne({\n            appName: name,\n            city: itemLocality,\n            country: itemCountry,\n            latitude: lat,\n            longitude: lng,\n            bounds: response.results[0].geometry.viewport,\n            date: new Date()\n          })\n          .then(() => {\n            collection\n              .find({}, { sort: { date: -1 } })\n              .asArray()\n              .then(results => {\n                this.setState({\n                  apps: results,\n                  app: name\n                });\n              });\n          });\n      },\n      error => {\n        console.error(error);\n      }\n    );\n  }\n  deleteApp(name) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"template\"\n    );\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection.findOneAndDelete({ appName: name }).then(() => {\n      collection\n        .find({}, { sort: { date: -1 } })\n        .asArray()\n        .then(results => {\n          this.setState({\n            app: \"home\",\n            apps: results\n          });\n        });\n    });\n  }\n  updateHebrew(name, myparam, newValue) {\n    const client = Stitch.defaultAppClient;\n    const mongodb = client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"template\"\n    );\n    var db = mongodb.db(\"Infrastructure\");\n    var collection = db.collection(\"Apps\");\n    collection\n      .findOneAndUpdate(\n        { appName: name },\n        { $set: { hebrew: newValue } },\n        { upsert: \"true\" }\n      )\n      .then(() => {\n        collection\n          .find({}, { sort: { date: -1 } })\n          .asArray()\n          .then(results => {\n            console.log(\"updated\");\n            this.setState({\n              app: name,\n              apps: results\n            });\n          });\n      });\n  }\n  changeApp(app) {\n    this.setState({ app: app });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.apps ? (\n          <div class=\"wrapper\" dir=\"rtl\">\n            {this.state.sidebar ? (\n              <Sidebar\n                deleteApp={this.deleteApp}\n                newApp={this.newApp}\n                apps={this.state.apps}\n                app={this.state.app}\n                changeApp={this.changeApp}\n              />\n            ) : null}\n            <Content\n              hideSidebar={this.hideSidebar}\n              deleteApp={this.deleteApp}\n              newApp={this.newApp}\n              app={this.state.app}\n              apps={this.state.apps}\n              updateHebrew={this.updateHebrew}\n              addPost={this.addPost}\n              changeApp={this.changeApp}\n            />\n          </div>\n        ) : (\n          <div class=\"App-header\">\n            <ReactLoading type={\"bars\"} color={\"white\"} />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}