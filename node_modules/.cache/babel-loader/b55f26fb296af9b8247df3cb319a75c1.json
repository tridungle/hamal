{"ast":null,"code":"import { fromByteArray, toByteArray } from \"base64-js\";\nexport function base64Decode(str) {\n  var unevenBytes = str.length % 4;\n  var strToDecode;\n\n  if (unevenBytes != 0) {\n    var paddingNeeded = 4 - unevenBytes;\n    strToDecode = str + \"=\".repeat(paddingNeeded);\n  } else {\n    strToDecode = str;\n  }\n\n  var bytes = toByteArray(strToDecode);\n  return utf8Slice(bytes, 0, bytes.length);\n}\nexport function base64Encode(str) {\n  var result;\n\n  if (\"undefined\" === typeof Uint8Array) {\n    result = utf8ToBytes(str);\n  }\n\n  result = new Uint8Array(utf8ToBytes(str));\n  return fromByteArray(result);\n}\n\nfunction utf8ToBytes(string) {\n  var units = Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n  var i = 0;\n\n  for (; i < length; i++) {\n    codePoint = string.charCodeAt(i);\n\n    if (codePoint > 0xd7ff && codePoint < 0xe000) {\n      if (leadSurrogate) {\n        if (codePoint < 0xdc00) {\n          if ((units -= 3) > -1) {\n            bytes.push(0xef, 0xbf, 0xbd);\n          }\n\n          leadSurrogate = codePoint;\n          continue;\n        } else {\n          codePoint = leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00 | 0x10000;\n          leadSurrogate = null;\n        }\n      } else {\n        if (codePoint > 0xdbff) {\n          if ((units -= 3) > -1) {\n            bytes.push(0xef, 0xbf, 0xbd);\n          }\n\n          continue;\n        } else if (i + 1 === length) {\n          if ((units -= 3) > -1) {\n            bytes.push(0xef, 0xbf, 0xbd);\n          }\n\n          continue;\n        } else {\n          leadSurrogate = codePoint;\n          continue;\n        }\n      }\n    } else if (leadSurrogate) {\n      if ((units -= 3) > -1) {\n        bytes.push(0xef, 0xbf, 0xbd);\n      }\n\n      leadSurrogate = null;\n    }\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) {\n        break;\n      }\n\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) {\n        break;\n      }\n\n      bytes.push(codePoint >> 0x6 | 0xc0, codePoint & 0x3f | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) {\n        break;\n      }\n\n      bytes.push(codePoint >> 0xc | 0xe0, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    } else if (codePoint < 0x200000) {\n      if ((units -= 4) < 0) {\n        break;\n      }\n\n      bytes.push(codePoint >> 0x12 | 0xf0, codePoint >> 0xc & 0x3f | 0x80, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);\n    } else {\n      throw new Error(\"Invalid code point\");\n    }\n  }\n\n  return bytes;\n}\n\nexport function utf8Slice(buf, start, end) {\n  var res = \"\";\n  var tmp = \"\";\n  end = Math.min(buf.length, end || Infinity);\n  start = start || 0;\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7f) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);\n      tmp = \"\";\n    } else {\n      tmp += \"%\" + buf[i].toString(16);\n    }\n  }\n\n  return res + decodeUtf8Char(tmp);\n}\n\nfunction decodeUtf8Char(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (err) {\n    return String.fromCharCode(0xfffd);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}